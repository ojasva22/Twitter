CREATE TABLE public.followers (
	id serial NOT NULL,
	follower_id int4 NULL,
	following_id int4 NULL,
	followed_on timestamp NOT NULL,
	CONSTRAINT followers_pkey PRIMARY KEY (id),
	CONSTRAINT unique_follower_following UNIQUE (follower_id, following_id)
);


-- public.followers foreign keys

ALTER TABLE public.followers ADD CONSTRAINT followers_follower_id_fkey FOREIGN KEY (follower_id) REFERENCES users(user_id);
ALTER TABLE public.followers ADD CONSTRAINT followers_following_id_fkey FOREIGN KEY (following_id) REFERENCES users(user_id);

LIKES

CREATE TABLE public.likes (
	id serial NOT NULL,
	user_liked int4 NULL,
	tweet_liked int4 NULL,
	liked_on timestamp NOT NULL,
	CONSTRAINT likes_pkey PRIMARY KEY (id),
	CONSTRAINT unique_uid_tweetid UNIQUE (user_liked, tweet_liked),
	CONSTRAINT unique_user_tweet_like UNIQUE (user_liked, tweet_liked)
);


-- public.likes foreign keys

ALTER TABLE public.likes ADD CONSTRAINT likes_tweet_liked_fkey FOREIGN KEY (tweet_liked) REFERENCES tweets(tweet_id);
ALTER TABLE public.likes ADD CONSTRAINT likes_user_liked_fkey FOREIGN KEY (user_liked) REFERENCES users(user_id);




SENSITIVE WORDS

CREATE TABLE public.sensitivewords (
	id serial NOT NULL,
	word text NOT NULL,
	createdon timestamp NOT NULL,
	updatedon timestamp NOT NULL,
	active bool NOT NULL,
	CONSTRAINT sensitivewords_pkey PRIMARY KEY (id),
	CONSTRAINT sensitivewords_word_key UNIQUE (word)
);





TAGMASTER

CREATE TABLE public.tagmaster (
	id serial NOT NULL,
	tags text NOT NULL,
	createdon timestamp NOT NULL,
	CONSTRAINT tagmaster_pkey PRIMARY KEY (id)
);




TWEETmaPPINH


CREATE TABLE public.tweetmapping (
	id serial NOT NULL,
	tweetid int4 NOT NULL,
	tagid int4 NOT NULL,
	createdon timestamp NOT NULL,
	CONSTRAINT tweetmapping_pkey PRIMARY KEY (id)
);


-- public.tweetmapping foreign keys

ALTER TABLE public.tweetmapping ADD CONSTRAINT tweetmapping_tweetid_fkey null;




 TWEETS
 
 CREATE TABLE public.tweets (
	tweet_id serial NOT NULL,
	uid int4 NULL,
	tweets text NOT NULL,
	tags _varchar NULL,
	created_on timestamp NOT NULL,
	CONSTRAINT tweets_pkey PRIMARY KEY (tweet_id)
);


-- public.tweets foreign keys

ALTER TABLE public.tweets ADD CONSTRAINT tweets_uid_fkey FOREIGN KEY (uid) REFERENCES users(user_id);






CREATE TABLE public.users (
	user_id serial NOT NULL,
	username varchar(50) NOT NULL,
	"password" text NOT NULL,
	email varchar(50) NOT NULL,
	created_on timestamp NOT NULL,
	user_type_id int4 NOT NULL,
	CONSTRAINT users_email_key UNIQUE (email),
	CONSTRAINT users_pkey PRIMARY KEY (user_id),
	CONSTRAINT users_username_key UNIQUE (username)
);
CREATE UNIQUE INDEX name_idx ON public.users USING btree (username);


-- public.users foreign keys

ALTER TABLE public.users ADD CONSTRAINT users_user_type_fk FOREIGN KEY (user_type_id) REFERENCES usertype(id);




USERTYPE

CREATE TABLE public.usertype (
	id serial NOT NULL,
	"type" varchar(6) NOT NULL,
	CONSTRAINT usertype_pkey PRIMARY KEY (id)
);


